name: CI/CD Pipeline

on:
  push:
    branches: [ temp ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Check if JAR file exists and copy to Docker context
        run: |
          if [ -f build/libs/app.jar ]; then
            echo "JAR file exists."
            cp build/libs/app.jar .
          else
            echo "JAR file not found."
            exit 1
          fi

      - name: Build Docker image
        run: |
          docker build --no-cache -t heeyoungha/study-app:latest .
          docker tag heeyoungha/study-app:latest heeyoungha/study-app:${{ github.sha }}
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push to DockerHub
        run: |
          docker push heeyoungha/study-app:latest
          docker push heeyoungha/study-app:${{ github.sha }}

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" | tr -d '\r' > private_key
          chmod 600 private_key

      - name: 비밀키 형식 확인
        run: |
          start_line=$(head -n 1 private_key)
          end_line=$(tail -n 1 private_key)
          
          if [[ "$start_line" == "-----BEGIN RSA PRIVATE KEY-----" && "$end_line" == "-----END RSA PRIVATE KEY-----" ]]; then
            echo "The private key is in the correct RSA format."
          else
            echo "The private key is not in the correct RSA format."
            exit 1
          fi

      - name: Verify private key file
        run: ls -l private_key

      - name: Check private key format
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" | tr -d '\r' > private_key
          file private_key
      - name: SSH and deploy
        run: |
          ssh -vvv -o StrictHostKeyChecking=no -i private_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            cd study
            docker-compose down
            docker system prune -a --volumes
            docker-compose pull  
            docker-compose up -d
          '